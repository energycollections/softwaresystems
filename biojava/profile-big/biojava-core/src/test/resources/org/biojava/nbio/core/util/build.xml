<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="Indexer" default="default" basedir=".">
    <description>Builds, tests, and runs the project Indexer.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Indexer-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->

        <target name="-post-init">
            <property name="distsrc.dir" value="distsrc"/>
            <property name="webpage.dir" value="forweb"/>   <!-- converted alredy -->
            <property name="package.dir" value="${src.dir}/com/physpics/indexer"/>

            <!-- establish the build information values -->
            <buildnumber/>   <!-- sets build.number -->
            <echo message="build.number initially: ${build.number}"/>

            <tstamp>
                <format property="build.time" pattern="yyyy-MM-d HH:mm" 
                        timezone="GMT" locale="en"/>
            </tstamp>
            <tstamp>
                <format property="build.date" pattern="MMMM d, yyyy" 
                        timezone="GMT" locale="en"/>
            </tstamp>
            <!-- kludge: fetch release.string to replace its value elsewhere in Indexer.properties -->
            <property prefix="interim" file="${distsrc.dir}/Indexer.properties"/>
            <echo message="build.number after interim Indexer.properties: ${build.number}"/>

            
            <!-- make sure that the code can access all properties
                (release.string comes directly from Indexer.properties -->
            <touch file="${distsrc.dir}/Indexer.properties"/>
            <copy file="${distsrc.dir}/Indexer.properties" todir="${package.dir}">
                <filterset>
                    <filter token="BUILD_NUMBER" value="${build.number}"/>
                    <filter token="BUILD_TIME" value="${build.time}"/>
                    <filter token="BUILD_DATE" value="${build.date}"/>
                    <filter token="RELEASE_STRING" value="${interim.release.string}"/>
                </filterset>
            </copy>

            <echo message="build.number after copying Indexer.properties: ${build.number}"/>
            
            <!-- now get all properties from Indexer.properties 
                (except build.number and build.time are not reset) -->
            <property resource="com/physpics/indexer/Indexer.properties"
                classpath="${src.dir}"/>
                
                
            <echo message="build.number after Indexer.properties: ${build.number}"/>
            <filterset id="buildfilters">
                    <filter token="BUILD_NUMBER" value="${build.number}"/>
                    <filter token="BUILD_TIME" value="${build.time}"/>
                    <filter token="BUILD_DATE" value="${build.date}"/>
                    <filter token="RELEASE_STRING" value="${release.string}"/>
            </filterset>

            <!-- package.dir, dist.dir, and webpage.dir get files from distsrc -->
            <property name="srcFilesFromDistsrc" 
                value="DaVinci-Colors.txt IndexerHelp.html indexterms.txt"/>
            <property name="distFilesFromDistsrc" 
                value="README page-number.el runIndexer.bat 
                        DaVinci-Colors.txt IndexerHelp.html indexterms.txt"/>
            <property name="distBinaryFilesFromDistsrc" 
                value="Indexer.lnk logo32f.ico"/>
            <property name="webpageFilesFromDistsrc" 
                value="IndexerHelp.html index.html Indexer.jnlp download.html README"/>
        </target>

        <!-- before compiling, add to src files from distsrc and distsrc/images -->
        <target name="-pre-compile">
            <copy todir="${package.dir}">
                <fileset dir="${distsrc.dir}" includes="${srcFilesFromDistsrc}"/>
                <filterset refid="buildfilters"/>
            </copy>
            <copy todir="${package.dir}/images">
                <fileset dir="${distsrc.dir}/images"/>
            </copy>
        </target>

        <!-- moredist - adapt ${dist.dir}:
                add files from distsrc & distsrc/images
                delete the netbeans README.txt
        -->
        <target name="-moredist" depends="init">
            <copy todir="${dist.dir}">
                <fileset dir="${distsrc.dir}" includes="${distFilesFromDistsrc}"/>
                <filterset refid="buildfilters"/>
            </copy>
            <copy todir="${dist.dir}">
                <fileset dir="${distsrc.dir}" includes="${distBinaryFilesFromDistsrc}"/>
            </copy>
            <copy todir="${dist.dir}/images"> 
                <fileset dir="${distsrc.dir}/images"/>
            </copy>
            <delete file="${dist.dir}/README.TXT"/>
        </target>

        <!-- Build the web page.  add files distsrc and distsrc/images -->
        <target name="webpage" 
                    description="build the Indexer webpage directory">
            <copy todir="${webpage.dir}">
                <fileset dir="${distsrc.dir}" includes="${webpageFilesFromDistsrc}"/>
                <filterset refid="buildfilters"/>
            </copy>
            <copy file="${dist.dir}/Indexer.jar" todir="${webpage.dir}"/>
            <copy file="${dist.dir}/lib/swing-layout-1.0.jar" todir="${webpage.dir}"/>
            <copy todir="${webpage.dir}/images"> 
                <fileset dir="${distsrc.dir}/images"/>
            </copy>
        </target>
            
        <target name="tarfile" depends="webpage"
                    description="tar up the dist directory and add to webpage">
            <tar destfile="${webpage.dir}/Indexer.tar" basedir="${dist.dir}"/>
        </target>
        
        <target name="-post-jar" depends="-moredist,webpage,tarfile"/>
        
        <target name="-post-clean">
            <delete dir="${webpage.dir}"/>
            <delete>
                <fileset dir="${package.dir}" includes="${srcFilesFromDistsrc}"></fileset>
                <fileset dir="${package.dir}" includes="Indexer.properties"></fileset>
            </delete>
        </target>
</project>
